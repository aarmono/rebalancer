
<%
from decimal import Decimal
from rebalance import *

account_target = AccountTarget(user_token, SecurityDatabase())

asset_ids = {}
tax_groups = []
with Database() as db:
    for (name, _) in db.get_tax_groups():
        tax_groups.append(name)
    end

    for (asset, id) in db.get_asset_abbreviations():
        asset_ids[asset] = id
end

assets = sorted(account_target.get_target_asset_percentages().keys(),
                key=lambda x: asset_ids[x])
num_assets = len(assets)

%>

<!DOCTYPE html>

<html>
<head>
<style>
table, th, td {
  border: 1px solid black;
}
</style>
</head>
<title>Tax Affinity Configuration</title>
<body>

<h1>Tax Affinity Configuration</h1>

<form action="/asset_affinity/update" method="post" enctype="multipart/form-data">

<input type="hidden" name="user_token" value="{{user_token}}">

% for tax_status in tax_groups:

    <h2>{{tax_status}}</h2>

        <%
        affinities = account_target.get_tax_group_asset_affinity(tax_status)
        affinity_map = {}

        for i in range(0, len(affinities)):
            affinity_map[affinities[i]] = i + 1
        end

        for asset in assets:
            cur_value = "DISABLE"
            if asset in affinity_map:
                cur_value = affinity_map[asset]
            end

            values = [(i, i) for i in range(1, num_assets + 1)]
            values.append(("DISABLE", "Disable"))
        %>
            <p>
                <label for="{{tax_status}}|{{asset}}">{{asset}} Priority: </label>
                <select name="{{tax_status}}|{{asset}}">
                % for (value, text) in values:
                    <option value="{{value}}" {{!'selected="selected"' if value == cur_value else ''}}>{{text}}</option>
                %end
                </select>
            </p>

        % end

    % end

<input type="submit" value="Update Affinities" />

</body>
</html>