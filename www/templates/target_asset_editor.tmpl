
<%
from decimal import Decimal

asset_targets = account_target.get_asset_targets()

TargetTypes = account_target.TargetTypes
unassigned_assets = sorted(set(map(lambda x: x[0], database.get_asset_abbreviations())) - set(assets))
%>

<h1>Configure Target Positions</h1>

<table>
    <tr>
        <th>Delete?</th>
        <th>Asset</th>
        <th>Target</th>
        <th>Target Type</th>
    </tr>

% for asset in assets:
    <tr>
        <%
        (target, target_type) = asset_targets.get(asset, (Decimal(0.0), TargetTypes.PERCENT))
        if target_type == TargetTypes.PERCENT or target_type == TargetTypes.PERCENT_REMAINDER:
            target = (target * 100).quantize(Decimal('1.0'))
        elif target_type == TargetTypes.DOLLARS:
            target = target.quantize(Decimal('0'))
        end
        %>

        <td><input type = "checkbox" name = "delete_allocation" value = "{{asset}}" /></td>
        <td>{{asset}}</td>
        <td><input name="allocation/{{asset}}" type="number" step=".1" value="{{target if target is not None else ''}}"></td>
        <td>
            <select name="allocation_type/{{asset}}">
                % for cur_type in sorted(TargetTypes._asdict().values()):
                <option value="{{cur_type}}" {{!'selected="selected"' if target_type == cur_type else ''}}>{{account_target.get_target_type_abbreviation(cur_type)}}</option>
                % end
            </select>
        </td>
    </tr>
% end
</table>

% if len(unassigned_assets) > 0:
<p>
    <label for="new_allocation">New Target: </label>
    <select name="new_allocation">
        % for asset in unassigned_assets:
        <option value="{{asset}}">{{asset}}</option>
        %end
        <option value="" selected="selected"></option>
    </select>
</p>
%end
